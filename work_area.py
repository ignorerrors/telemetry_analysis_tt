import tkinter as tk
from tkinter import ttk
import pandas as pd
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from constants import paremeter_categories
from plotting_agraph import PlotManager


def create_basic_info_tab(notebook, df):
    """–í–∫–ª–∞–¥–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    frame = ttk.Frame(notebook)
    notebook.add(frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    # –°–æ–∑–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
    text_widget = tk.Text(frame, wrap=tk.WORD, width=80, height=20)
    scrollbar = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=text_widget.yview)
    text_widget.configure(yscrollcommand=scrollbar.set)

    # –î–æ–±–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
    info_text = f"""
    üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–ù–ù–´–•:
    
    ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df):,}
    ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(df.columns)}
    ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {df['Timestamp'].min()} - {df['Timestamp'].max()}
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏: {df['Timestamp'].max() - df['Timestamp'].min()}
    """
    # –î–æ–±–∞–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categorized = categorize_parameters(df.columns)
    for category, params in categorized.items():
        info_text += f"\n    ‚Ä¢ {category}: {len(params)} {pluralize(len(params), ['–ø–∞—Ä–∞–º–µ—Ç—Ä', '–ø–∞—Ä–∞–º–µ—Ç—Ä–∞', '–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'])}"
    info_text += "\n"
    info_text += f"\n    –ó–ê–ì–†–£–ñ–ï–ù–û: {pd.Timestamp.now()}"

    text_widget.insert(tk.END, info_text)
    text_widget.config(state=tk.DISABLED)

    text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10, pady=10)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y, padx=(0, 10), pady=10)

    return frame


def create_statics_tab(notebook, df):
    """–í–∫–ª–∞–¥–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    frame = ttk.Frame(notebook)
    notebook.add(frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    columns = ("–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ú–∏–Ω", "–ú–∞–∫—Å", "–°—Ä–µ–¥–Ω–µ–µ", "–†–∞–∑–±—Ä–æ—Å", "–ù–µ-NaN")
    tree = ttk.Treeview(frame, columns=columns, show="headings", height=20)

    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=100)

    for column in df.columns:
        if pd.api.types.is_numeric_dtype(df[column]):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
            stats = [  # –°—Ç—Ä–æ–∫–∞
                column,
                f"{df[column].min():.3f}",
                f"{df[column].max():.3f}",
                f"{df[column].mean():.3f}",
                f"{df[column].std():.3f}",
                f"{df[column].count()}/{len(df)}",
            ]
            tree.insert("", "end", values=stats)  # –î–æ–±–∞–≤–ª—è—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É

    scrollbar = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=tree.yview)
    tree.configure(yscrollcommand=scrollbar.set)

    tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    return frame


def create_plots_tab(notebook, df, status_var=None):
    """–í–∫–ª–∞–¥–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    frame = ttk.Frame(notebook)
    notebook.add(frame, text="–ì—Ä–∞—Ñ–∏–∫–∏")  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    control_frame = ttk.Frame(frame)  # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    control_frame.pack(fill=tk.X, padx=10, pady=5)

    # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –æ—Å–∏ X
    ttk.Label(control_frame, text="–û—Å—å X:").grid(row=0, column=0, padx=5, pady=5)
    x_var = tk.StringVar(value="Timestamp")
    x_combobox = ttk.Combobox(control_frame, textvariable=x_var, state="readonly")
    x_combobox["values"] = list(df.columns)
    x_combobox.grid(row=0, column=1, padx=5, pady=5)

    # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –æ—Å–∏ Y
    ttk.Label(control_frame, text="–û—Å—å Y:").grid(row=0, column=2, padx=5, pady=5)
    y_var = tk.StringVar(value="Timestamp")
    y_combobox = ttk.Combobox(control_frame, textvariable=y_var, state="readonly")
    y_combobox["values"] = list(df.columns)
    y_combobox.grid(row=0, column=3, padx=5, pady=5)

    # –§—Ä–µ–π–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    plot_frame = ttk.Frame(frame)
    plot_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # –°–æ–∑–¥–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤
    plot_manager = PlotManager(plot_frame, status_var)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    def update_plot():
        plot_manager.create_plot(df, x_var.get(), y_var.get())

    plot_btn = ttk.Button(control_frame, text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", command=update_plot)
    plot_btn.grid(row=0, column=4, padx=5, pady=5)

    # –°—Ç—Ä–æ—é –Ω–∞—á–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    update_plot()

    return plot_manager


def plot_data(df, x_col, y_col, parent_frame, status_var):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –û—á–∏—â–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
    for widget in parent_frame.winfo_children():
        widget.destroy()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not x_col or not y_col:
        return

    try:
        # –°–æ–∑–¥–∞—é —Ñ–∏–≥—É—Ä—É matplotlib
        fig = Figure(figsize=(10, 6))  # –í –¥—é–π–º–∞—Ö
        ax = fig.add_subplot(111)  #  1x1 —Å–µ—Ç–∫–∞, –ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è

        # –°—Ç—Ä–æ—é –≥—Ä–∞—Ñ–∏–∫
        ax.plot(df[x_col], df[y_col])
        ax.set_xlabel(x_col)
        ax.set_ylabel(y_col)
        ax.set_title(f"{x_col} | {y_col}")
        ax.grid(True)  # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ

        # –í—Å—Ç—Ä–∞–∏–≤–∞—é –≤ Tkinter
        canvas = FigureCanvasTkAgg(fig, parent_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        status_var.set(f"–°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫: {x_col} | {y_col}")
    except Exception as e:
        error_label = ttk.Label(parent_frame, text=f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è: {str(e)}", foreground="red")
        error_label.pack(pady=10)


def categorize_parameters(df_columns):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    categorized = {category: [] for category in paremeter_categories.keys()}
    categorized["–î—Ä—É–≥–∏–µ"] = []  # –î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –±—É–¥—É—Ç –¥–æ–ø—ã

    for column in df_columns:
        found_category = False
        for category, patterns in paremeter_categories.items():
            # –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            for pattern in patterns:
                if pattern.endswith(".*"):  # –ë—É–¥–µ—Ç —à–∞–±–ª–æ–Ω —Ç–∏–ø–∞ estimatorStatus.*
                    prefix = pattern[:-2]
                    if column.startswith(prefix):
                        categorized[category].append(column)
                        found_category = True
                        break
                elif column == pattern:  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    categorized[category].append(column)
                    found_category = True
                    break
            if found_category:
                break

        if not found_category:
            categorized["–î—Ä—É–≥–∏–µ"].append(column)

    # –£–¥–∞–ª—è—é –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    return {k: v for k, v in categorized.items() if v}


def pluralize(number, word_forms):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
    :param number: —á–∏—Å–ª–æ
    :param word_forms: ("–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∏", "–∑–∞–ø–∏—Å–µ–π")
    :return: —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º
    """
    if number % 10 == 1 and number % 100 != 11:
        return word_forms[0]
    elif 2 <= number % 10 <= 4 and (number % 100 < 10 or number % 100 >= 20):
        return word_forms[1]
    else:
        return word_forms[2]


def create_categorized_tabs(notebook, df):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

    categorized = categorize_parameters(df.columns)
    frame = ttk.Frame(notebook)
    notebook.add(frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")

    text_widget = tk.Text(frame, wrap=tk.WORD, width=80, height=20)
    scrollbar = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=text_widget.yview)
    text_widget.configure(yscrollcommand=scrollbar.set)
    info_text = ""
    total_parameters = 0
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category, parameters in categorized.items():
        info_text += f"\n    –ö–ê–¢–ï–ì–û–†–ò–Ø: {category}\n"
        info_text += "    " + "-" * 40 + "\n"

        if parameters:
            info_text += f"    –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(parameters)}\n\n"
            for param in sorted(parameters):
                non_null = df[param].count()
                total = len(df)
                dtype = str(df[param].dtype)  # –¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                info_text += f"    ‚Ä¢ {param}\n"
                info_text += f"    –¢–∏–ø: {dtype}, –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {non_null}/{total}\n"
                info_text += "\n"
            total_parameters += len(parameters)
        else:
            info_text += "    –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"

    text_widget.insert(tk.END, info_text)
    text_widget.config(state=tk.DISABLED)

    text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10, pady=10)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y, padx=10, pady=10)

    return notebook
